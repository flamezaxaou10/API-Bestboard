{
  "_from": "microgear",
  "_id": "microgear@0.8.1",
  "_inBundle": false,
  "_integrity": "sha1-4O78rw2xI350+zI6KQnqLSzEwFQ=",
  "_location": "/microgear",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "microgear",
    "fetchSpec": "latest",
    "name": "microgear",
    "raw": "microgear",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/microgear/-/microgear-0.8.1.tgz",
  "_shasum": "e0eefcaf0db1237e74fb323a2909ea2d2cc4c054",
  "_spec": "microgear",
  "_where": "/home/flame/Desktop/ProjectAPI",
  "author": {
    "email": "chavee@netpie.io",
    "name": "Chavee Issariyapat"
  },
  "bugs": {
    "url": "https://github.com/netpieio/microgear-nodejs/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "hat": "*",
    "localstorage-fs": "^0.1.0",
    "mqtt": "*",
    "oauth": "*"
  },
  "deprecated": false,
  "description": "NETPIE client library",
  "devDependencies": {},
  "directories": {
    "example": "examples"
  },
  "homepage": "https://github.com/netpieio/microgear-nodejs",
  "keywords": [
    "iot",
    "netpie",
    "platform"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "microgear",
  "optionalDependencies": {},
  "readme": "# microgear-nodejs\n\nmicrogear-nodejs is a client library for Node.js. The library is used to connect application code or hardware with the NETPIE Platform's service for developing IoT applications. For more details on the NETPIE Platform, please visit https://netpie.io .\n\n## Outgoing Network Port\n\nMake sure ther following ports are allowed to connect from your network.\n- Non-TLS mode : 8080 and 1883 (microgear-nodejs uses this mode by default)\n- TLS mode : 8081 and 8883\n\n## Installation\n\n```\nnpm install microgear\n```\n\n## Usage example\n```js\nvar MicroGear = require('microgear');\n\nconst APPID  = <APPID>;\nconst KEY    = <APPKEY>;\nconst SECRET = <APPSECRET>;\n\nvar microgear = MicroGear.create({\n    key : KEY,\n    secret : SECRET\n});\n\nmicrogear.on('connected', function() {\n    console.log('Connected...');\n    microgear.setAlias(\"mygear\");\n    setInterval(function() {\n        microgear.chat('mygear', 'Hello world.');\n    },1000);\n});\n\nmicrogear.on('message', function(topic,body) {\n    console.log('incoming : '+topic+' : '+body);\n});\n\nmicrogear.on('closed', function() {\n    console.log('Closed...');\n});\n\nmicrogear.connect(APPID);\n```\n\n## Library Usage\n\n**Microgear.create (*gearkey*, *gearsecret*, *scope*)**\n\n**arguments**\n* *config* is a json object with the following attributes:\n  * *gearkey* `string` - is used as a microgear identity.\n  * *gearsecret* `string` comes in a pair with gearkey. The secret is used for authentication and integrity.\n  * *alias* `string` - specifies the device alias.  \n\n```js\nvar microgear = MicroGear.create({\n    key : \"sXfqDcXHzbFXiLk\",\n    secret : \"DNonzg2ivwS8ceksykGntrfQjxbL98\",\n    alias : \"myplant\"\n});\n```\n---\n## microgear\n**void microgear.connect (*appid*, *callback*)**\n\n**arguments**\n* *appid* `string` - a group of application that microgear will connect to.\n```js\nmicrogear.connect(\"happyfarm\");\n```\n---\n**void microgear.setAlias (*gearalias*)**\nmicrogear can set its own alias, which to be used for others make a function call chat(). The alias will appear on the key management portal of netpie.io .\n\n**arguments**\n* *alias* `string` - name of this microgear.   \n\n```js\nmicrogear.setAlias(\"plant\");\n```\n---\n**void microgear.chat (*gearname*, *message*)**\n\n**arguments**\n* *gearname* `string` - name of microgear to which to send a message.\n* *message* `string` - message to be sent.\n\n```js\nmicrogear.chat(\"valve\",\"I need water\");\n```\n---\n**void microgear.publish (*topic*, *message*, [retained])**\nIn the case that the microgear want to send a message to an unspecified receiver, the developer can use the function publish to the desired topic, which all the microgears that subscribe such topic will receive a message.\n\n**arguments**\n* *topic* `string` - name of topic to be send a message to.\n* *message* `string` - message to be sent.\n* *retained* `boolean` - retain a message or not (the default is `false`)\n\n```js\nmicrogear.publish(\"/outdoor/temp\",\"28.5\");\nmicrogear.publish(\"/outdoor/humid\",\"56\",true);\n```\n---\n**void microgear.subscribe (*topic*)**\nmicrogear may be interested in some topic.  The developer can use the function subscribe() to subscribe a message belong to such topic. If the topic used to retain a message, the microgear will receive a message everytime it subscribes that topic.\n\n**arguments**\n* *topic* `string` - name of the topic to send a message to.\n\n```js\nmicrogear.subscribe(\"/outdoor/temp\");\n```\n---\n**void microgear.unsubscribe (*topic*)**\n cancel subscription\n\n**arguments**\n* *topic* `string` - name of the topic to send a message to.\n\n```js\nmicrogear.unsubscribe(\"/outdoor/temp\");\n```\n---\n**void microgear.writeFeed (*feedid*, *datajson* [, *apikey*])**\nwrite time series data to a feed storage\n\n**arguments**\n* *feedid* `string` - name of the feed \n* *datajson* `string` - data in json format \n* *apikey* `string` - apikey for authorization. If apikey is not specified, you will need to allow the AppID to access feed and then the default apikey will be assigned automatically.\n\n```js\nmicrogear.writeFeed(\"homesensor\",{temp:25.7,humid:62.8,light:8.5});\n```\n---\n\n**void microgear.setCachePath (path)**\nBy default, a microgear token cache file is stored in the same directory as the application within a file name of this format : 'microgear-<KEY>.cache'. This function is for setting a path of microgear token cache file. It will be useful when you want to run multiple microgears of the same device key on the same location.\n\n**arguments**\n* *path* `string` - file path\n\n```js\nmicrogear.setCachePath('microgear-g1.cache');\n```\n\n---\n**void microgear.resetToken (callback)**\nsend a revoke token control message to NETPIE and delete the token from cache. As a result, the microgear will need to request a new token for the next connection.\n\n**arguments**\n* *callback* `function` - this function will be called when the token reset is finished.\n\n```js\nmicrogear.resetToken(function(result){\n});\n```\n\nSince the function resetToken() is asynchronous, to connect applicatin after token reset,  the code should be as follows.\n```js\nmicrogear.resetToken(function(result){\n    microgear.connect(APPID);\n});\n```\n\n---\n\n**void microgear.useTLS (tlsmode)**\nEnable or disable TLS. For microgear-nodejs, TLS is disabled by default.\n\n**arguments**\n* *tlsmode* `boolean` - The default is true (use TLS).\n\n```js\nmicrogear.useTLS(false);\n```\n\n---\n\n## Events\nAn application that runs on a microgear is an event-driven type, which responses to various events with the callback function in a form of event function call:\n\n**void microgear.on (*event*, *callback*)**\n\n**arguments**\n* *event* `string` - name of an event\n* *callback* `function` - callback function\n\nNETPIE consists of the following events:\n\n**Event: 'connected'**\nThis event is created when the microgear library successfully connects to the NETPIE platform.\n```\nmicrogear.on(\"connected\", function() {\n\tconsole.log(\"connected\");\n});\n```\n\n**Event: 'closed'**\nThis event is created when the microgear library disconnects the NETPIE platform.\n```\nmicrogear.on(\"closed\", function() {\n\tconsole.log(\"closed\");\n});\n```\n\n**Event: 'error'**\nThis event is created when an error occurs within a microgear.\n```\nmicrogear.on(\"error\", function(err) {\n\tconsole.log(\"Error: \"+err);\n});\n```\n\n**Event: 'warning'**\nThis event is created when some event occurs, and a warning message will be notified.\n```\nmicrogear.on(\"warning\", function(msg) {\n\tconsole.log(\"Connection rejected: \"+msg);\n});\n```\n\n**Event: 'info'**\nThis event is created when there is some event occurs within a microgear\n```\nmicrogear.on(\"info\", function(msg) {\n\tconsole.log(\"Connection rejected: \"+msg);\n});\n```\n\n**Event: 'message'**\nWhen there is an incomming message, this event is created with the related information to be sent via the callback function.\n\n```\nmicrogear.on(\"message\", function(topic,msg) {\n\tconsole.log(\"Incoming message: \"+mesage);\n});\n```\n\n**Event: 'present'**\nThis event is created when there is a microgear under the same appid appears online to connect to NETPIE.\n```\nmicrogear.on(\"present\", function(event) {\n\tconsole.log(\"New friend found: \"+event.gearkey);\n});\n```\n\n**Event: 'absent'**\nThis event is created when the microgear under the same appid appears offline.\n```\nmicrogear.on(\"absent\", function(event) {\n\tconsole.log(\"Friend lost: \"+event.gearkey);\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/netpieio/microgear-nodejs.git"
  },
  "scripts": {},
  "version": "0.8.1"
}
